/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L_SPC 1
#define L_RET 2
#define L_TAB 3
#define L_BSC 4

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

/ {
  behaviors {
    tdl: tap_dance_l {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LALT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mt LALT LPAR>, <&kp LBKT>;
    };
    tdr: tap_dance_r {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_RALT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mt RALT RPAR>, <&kp RBKT>;
    };
    tde: tap_dance_esc {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_ESC";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp J>, <&kp ESC>;
    };
    combos {
      compatible = "zmk,combos";
      // capsword fj
      COMBO(capsword, &caps_word, 16 19)
      COMBO(lctl, &kp LCTRL, 13 16)
      COMBO(lalt, &kp LALT, 14 16)
      COMBO(lgui, &kp LGUI, 15 16)
      COMBO(lsht, &kp LSHFT, 16 17)

      COMBO(rctl, &kp RCTRL, 19 22)
      COMBO(ralt, &kp RALT, 19 21)
      COMBO(rgui, &kp RGUI, 19 20)
      COMBO(rsht, &kp RSHFT, 18 19)
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
// --------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | -    |
// | ESC  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | '    |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ALT | TAB | SPC |   | RET | BKSP | ALT |
      bindings = <
        &kp TAB        &kp Q &kp W &kp E &kp R &kp T  &kp Y &kp U  &kp I     &kp O   &kp P    &kp MINUS
        &mt LCTRL ESC  &kp A &kp S &kp D &kp F &kp G  &kp H &tde   &kp K     &kp L   &kp SEMI &mt RCTRL SQT
        &mt LSHFT LBRC &kp Z &kp X &kp C &kp V &kp B  &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT RBRC
        &tdl &lt L_TAB TAB &lt L_SPC SPACE  &lt L_RET RET &lt L_BSC BSPC &tdr
      >;
    };

    space_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// |      | F1  | F2  | F3  | F4  | F5  |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT | F6  | F7  | F8  | F9  | F10 |   |     |     |     |     |     |      |
//                    | GUI | LWR | ENT |   | SPC | RSE | ALT |
      bindings = <
        &kp GRAVE &kp N1    &kp N2    &kp N3    &kp N4   &kp N5   &kp N6   &kp N7    &kp N8    &kp N9  &kp N0   &kp EQUAL
        &kp DEL   &kp GRAVE &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &kp HOME &kp PG_DN &kp PG_UP &kp END &kp BSLH &kp BSPC
        &trans    &trans    &trans    &trans    &trans   &trans   &trans   &trans    &trans    &trans  &trans   &trans
                                      &trans    &trans   &trans   &trans   &kp DEL  &trans
      >;
    };

    return_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// |      |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |  ~   |
//                    | GUI | ADJ | ENT |   | SPC | ADJ | ALT |
      bindings = <
        &kp TILDE &kp EXCL  &kp AT    &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR  &kp RPAR &kp PLUS
        &kp DEL   &kp TILDE &kp UNDER &kp PLUS &kp LBRC &kp RBRC    &kp LEFT  &kp DOWN &kp UP   &kp RIGHT &kp PIPE &kp BSPC
        &trans    &trans    &trans    &trans   &trans   &trans      &trans    &trans   &trans   &trans    &trans   &trans
                    	                &trans   &trans   &trans      &trans    &trans   &trans
      >;
    };

    tab_layer {
// -----------------------------------------------------------------------------------------
// | MUTE |VOLDN|VOLUP| PREV| NEXT| PLAY|   | BT1 | BT2 | BT3 | BT4 | BT5 | BTCLR|
// | CAPS |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     | BRID| BRIU|   |     |     |     |     |     |      |
//                    | GUI |     | ENT |   | SPC |     | ALT |
      bindings = <
        &kp F11 &kp F1     &kp F2       &kp F3       &kp F4 &kp F5  &kp F6 &kp F7   &kp F8     &kp F9     &kp F10 &kp F12
        &trans  &trans     &trans       &trans       &trans &trans  &trans &trans   &trans     &trans     &trans  &trans
        &trans  &kp K_MUTE &kp K_VOL_DN &kp K_VOL_UP &trans &trans  &trans &kp K_PP &kp K_PREV &kp K_NEXT &trans  &trans
                                        &trans       &trans &trans  &trans &trans   &trans
      >;
    };

    backspace_layer {
// -----------------------------------------------------------------------------------------
// | MUTE |VOLDN|VOLUP| PREV| NEXT| PLAY|   | BT1 | BT2 | BT3 | BT4 | BT5 | BTCLR|
// | CAPS |     |     |     |     |     |   |     |     |     |     |     |      |
// |      |     |     |     | BRID| BRIU|   |     |     |     |     |     |      |
//                    | GUI |     | ENT |   | SPC |     | ALT |
      bindings = <
        &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans      &trans &trans &trans &trans &bt BT_CLR
        &trans &trans       &trans       &trans       &trans       &trans       &trans      &trans &trans &trans &trans &trans
        &trans &trans       &trans       &bt BT_CLR   &trans       &bootloader  &bootloader &trans &trans &trans &trans &trans
                                         &trans       &trans       &trans       &trans      &trans &trans
      >;
    };
  };
};